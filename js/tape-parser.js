/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var tapeParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,10,11,16],$V1=[10,13,24,26,29,30,31,32,33,34,36,38,39,41,42,43,44,45,48,49,52,53,54,55,59,60,61,62,63],$V2=[2,10],$V3=[10,15,24,26,29,30,31,32,33,34,36,38,39,41,42,43,44,45,48,49,52,53,54,55,59,60,61,62,63],$V4=[1,39],$V5=[1,20],$V6=[1,41],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,32],$Vg=[1,31],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,36],$Vl=[1,37],$Vm=[1,38],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[10,13,15,24,26,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,52,53,54,55,59,60,61,62,63],$Vx=[2,42],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[1,62],$VE=[1,63],$VF=[1,64],$VG=[1,65],$VH=[1,66],$VI=[1,67],$VJ=[1,68],$VK=[1,69],$VL=[1,70],$VM=[1,71],$VN=[1,72],$VO=[1,73],$VP=[1,74],$VQ=[1,75],$VR=[2,54],$VS=[2,58],$VT=[1,94],$VU=[1,95],$VV=[1,96],$VW=[1,97],$VX=[1,98],$VY=[1,99],$VZ=[10,24,26,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,48,49,52,53,54,55,59,60,61,62,63],$V_=[10,11,14,19,21,28,39,54,55,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$V$=[10,19,26,48,49,52,53,54,55,59,60,61,62,63],$V01=[10,39,54,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],$V11=[2,45],$V21=[2,56],$V31=[10,26,48,49,52,53,54,55,59,60,61,62,63],$V41=[1,134],$V51=[10,15,24,26,29,30,31,32,33,34,36,38,39,41,42,43,44,45,46,47,48,49,52,53,54,55,59,60,61,62,63],$V61=[10,11,14,19,21,28,39,58],$V71=[2,44],$V81=[1,150],$V91=[1,151],$Va1=[1,152],$Vb1=[13,15,24,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47],$Vc1=[2,36],$Vd1=[1,158];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"def":4,"funcs":5,"EOF":6,"DEFINE_8":7,"DEFINE_16":8,"func":9,"NAME":10,"{":11,"instrs":12,"}":13,"DO":14,"END":15,"MAIN":16,"instr":17,"var":18,"=":19,"expr":20,".":21,"text":22,"op":23,"RETURN":24,"identifier":25,"(":26,"params":27,")":28,"INCR":29,"DECR":30,"WAIT":31,"BELL":32,"PRINT":33,"IF":34,"elses1":35,"?":36,"elses2":37,"WHILE":38,"[":39,"]":40,"LOOP":41,"RETRY":42,"STOP":43,"<|":44,"|>":45,"ELSE":46,"ELSEIF":47,"AT":48,"REG":49,"number":50,"exprDyad":51,"NOT":52,"BNOT":53,"+":54,"-":55,"comp":56,"params2":57,",":58,"DECIMAL":59,"BINARY":60,"OCTAL":61,"HEXADECIMAL":62,"CHARACTER":63,"STRING":64,"==":65,"!=":66,">":67,"<":68,">=":69,"<=":70,"*":71,"/":72,"%":73,"AND":74,"OR":75,"XOR":76,"NAND":77,"NOR":78,"XNOR":79,"BAND":80,"BOR":81,"BXOR":82,"BNAND":83,"BNOR":84,"BXNOR":85,"<<":86,">>":87,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"DEFINE_8",8:"DEFINE_16",10:"NAME",11:"{",13:"}",14:"DO",15:"END",16:"MAIN",19:"=",21:".",24:"RETURN",26:"(",28:")",29:"INCR",30:"DECR",31:"WAIT",32:"BELL",33:"PRINT",34:"IF",36:"?",38:"WHILE",39:"[",40:"]",41:"LOOP",42:"RETRY",43:"STOP",44:"<|",45:"|>",46:"ELSE",47:"ELSEIF",48:"AT",49:"REG",52:"NOT",53:"BNOT",54:"+",55:"-",58:",",59:"DECIMAL",60:"BINARY",61:"OCTAL",62:"HEXADECIMAL",63:"CHARACTER",64:"STRING",65:"==",66:"!=",67:">",68:"<",69:">=",70:"<=",71:"*",72:"/",73:"%",74:"AND",75:"OR",76:"XOR",77:"NAND",78:"NOR",79:"XNOR",80:"BAND",81:"BOR",82:"BXOR",83:"BNAND",84:"BNOR",85:"BXNOR",86:"<<",87:">>"},
productions_: [0,[3,3],[4,1],[4,1],[5,0],[5,2],[9,4],[9,3],[9,4],[9,3],[12,0],[12,2],[17,4],[17,4],[17,5],[17,3],[17,5],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,5],[17,6],[17,5],[17,4],[17,3],[17,3],[17,1],[17,1],[17,1],[17,1],[35,1],[35,3],[35,5],[37,0],[37,3],[37,5],[18,2],[18,2],[20,1],[20,1],[20,3],[20,4],[20,2],[20,3],[20,2],[20,2],[20,2],[20,2],[20,3],[20,3],[25,1],[27,0],[27,1],[57,1],[57,3],[51,1],[51,3],[50,1],[50,1],[50,1],[50,1],[50,1],[22,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return TAPE.formater.program($$[$0-2], $$[$0-1]); 
break;
case 2:
 this.$ =  8; 
break;
case 3:
 this.$ = 16; 
break;
case 5:
 this.$ = TAPE.formater.namedGather($$[$0-1], $$[$0]); 
break;
case 6: case 8:
 this.$ = new TAPE.node.Function($$[$0-3]  , $$[$0-1]); 
break;
case 7: case 9:
 this.$ = new TAPE.node.Function(null, $$[$0-1]); 
break;
case 10: case 54:
 this.$ = []; 
break;
case 11:
 this.$ = TAPE.formater.gather($$[$0-1], $$[$0]); 
break;
case 12:
 this.$ = new TAPE.node.Assign      ($$[$0-3], $$[$0-1]);     
break;
case 13:
 this.$ = new TAPE.node.StringAssign($$[$0-3], $$[$0-1]);     
break;
case 14:
 this.$ = new TAPE.node.SelfAssign  ($$[$0-4], $$[$0-1], $$[$0-3]); 
break;
case 15:
 this.$ = new TAPE.node.Return($$[$0-1]); 
break;
case 16:
 this.$ = new TAPE.node.Call($$[$0-4], $$[$0-2]); 
break;
case 17:
 this.$ = new TAPE.node.Call($$[$0-2], $$[$0-1]); 
break;
case 18:
 this.$ = new TAPE.node.Increment($$[$0-1]); 
break;
case 19:
 this.$ = new TAPE.node.Decrement($$[$0-1]); 
break;
case 20:
 this.$ = new TAPE.node.Action(TAPE.action.wait , $$[$0-1]); 
break;
case 21:
 this.$ = new TAPE.node.Action(TAPE.action.bell , $$[$0-1]); 
break;
case 22:
 this.$ = new TAPE.node.Action(TAPE.action.print, $$[$0-1]); 
break;
case 23:
 this.$ = TAPE.formater.if_($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 24:
 this.$ = TAPE.formater.if_($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 25:
 this.$ = TAPE.formater.loop(true , $$[$0-3]  , $$[$0-1]); 
break;
case 26:
 this.$ = TAPE.formater.loop(false, $$[$0-3]  , $$[$0-1]); 
break;
case 27:
 this.$ = TAPE.formater.loop(true , true, $$[$0-1]); 
break;
case 28:
 this.$ = TAPE.formater.loop(false, true, $$[$0-1]); 
break;
case 29:
 this.$ = new TAPE.node.Break(false, true ); 
break;
case 30:
 this.$ = new TAPE.node.Break(true , true ); 
break;
case 31:
 this.$ = new TAPE.node.Break(false, false); 
break;
case 32:
 this.$ = new TAPE.node.Break(true , false); 
break;
case 34: case 37:
 this.$ = TAPE.formater.else_($$[$0-1]); 
break;
case 35:
 this.$ = TAPE.formater.elseif($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 38:
 this.$ = TAPE.formater.elseif($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 39:
 this.$ = new TAPE.node.Variable(false, $$[$0]); 
break;
case 40:
 this.$ = new TAPE.node.Variable(true , $$[$0]); 
break;
case 41: case 42: case 55: case 58:
 this.$ = $$[$0]; 
break;
case 43:
 this.$ = $$[$0-1]; 
break;
case 44:
 this.$ = new TAPE.node.Call($$[$0-3], $$[$0-1]);   
break;
case 45:
 this.$ = new TAPE.node.Call($$[$0-1], [$$[$0]]); 
break;
case 46:
 this.$ = formater.callDyadic($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 47:
 this.$ = new TAPE.node.Monadic(TAPE.op.not_, $$[$0]); 
break;
case 48:
 this.$ = new TAPE.node.Monadic(TAPE.op.bnot, $$[$0]); 
break;
case 49:
 this.$ = new TAPE.node.Monadic(TAPE.op.abs , $$[$0]); 
break;
case 50:
 this.$ = new TAPE.node.Monadic(TAPE.op.neg , $$[$0]); 
break;
case 51: case 52:
 this.$ = new TAPE.node.Dyadic($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 53:
 this.$ = yytext; 
break;
case 56:
 this.$ = TAPE.formater.gather([], $$[$0]); 
break;
case 57:
 this.$ = TAPE.formater.gather($$[$0-2], $$[$0]); 
break;
case 59:
 this.$ = TAPE.formater.callDyadicList($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 60:
 this.$ = TAPE.formater.number('decimal'    , yytext); 
break;
case 61:
 this.$ = TAPE.formater.number('binary'     , yytext); 
break;
case 62:
 this.$ = TAPE.formater.number('octal'      , yytext); 
break;
case 63:
 this.$ = TAPE.formater.number('hexadecimal', yytext); 
break;
case 64:
 this.$ = TAPE.formater.number('character'  , yytext); 
break;
case 65:
 this.$ = yytext.slice(1, -1); 
break;
case 66:
 this.$ = TAPE.op.equ; 
break;
case 67:
 this.$ = TAPE.op.dif; 
break;
case 68:
 this.$ = TAPE.op.grt; 
break;
case 69:
 this.$ = TAPE.op.lst; 
break;
case 70:
 this.$ = TAPE.op.gte; 
break;
case 71:
 this.$ = TAPE.op.lte; 
break;
case 72:
 this.$ = TAPE.op.add   ; 
break;
case 73:
 this.$ = TAPE.op.sub   ; 
break;
case 74:
 this.$ = TAPE.op.mul   ; 
break;
case 75:
 this.$ = TAPE.op.div   ; 
break;
case 76:
 this.$ = TAPE.op.mod   ; 
break;
case 77:
 this.$ = TAPE.op.and_  ; 
break;
case 78:
 this.$ = TAPE.op.or_   ; 
break;
case 79:
 this.$ = TAPE.op.xor   ; 
break;
case 80:
 this.$ = TAPE.op.nand  ; 
break;
case 81:
 this.$ = TAPE.op.nor   ; 
break;
case 82:
 this.$ = TAPE.op.xnor  ; 
break;
case 83:
 this.$ = TAPE.op.band  ; 
break;
case 84:
 this.$ = TAPE.op.bor   ; 
break;
case 85:
 this.$ = TAPE.op.bxor  ; 
break;
case 86:
 this.$ = TAPE.op.bnand ; 
break;
case 87:
 this.$ = TAPE.op.bnor  ; 
break;
case 88:
 this.$ = TAPE.op.bxnor ; 
break;
case 89:
 this.$ = TAPE.op.lshift; 
break;
case 90:
 this.$ = TAPE.op.rshift; 
break;
}
},
table: [{3:1,4:2,7:[1,3],8:[1,4]},{1:[3]},o($V0,[2,4],{5:5}),o($V0,[2,2]),o($V0,[2,3]),{6:[1,6],9:7,10:[1,8],11:[1,9],16:[1,10]},{1:[2,1]},o($V0,[2,5]),{11:[1,11],14:[1,12]},o($V1,$V2,{12:13}),o($V3,$V2,{12:14}),o($V1,$V2,{12:15}),o($V3,$V2,{12:16}),{10:$V4,13:[1,17],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,15:[1,52],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,13:[1,53],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,15:[1,54],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($V0,[2,7]),o($Vw,[2,11]),o([10,39,65,66,67,68,69,70],$Vx,{23:56,19:[1,55],54:$Vy,55:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),{10:$V4,18:77,20:76,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:81,21:$VR,25:78,26:[1,79],27:80,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:82,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{18:83,48:$Vl,49:$Vm},{18:84,48:$Vl,49:$Vm},{10:$V4,18:77,20:85,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:86,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:87,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:88,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:89,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:90,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$VS,23:92,39:[1,91],54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},o($V3,$V2,{12:100}),o($VZ,$V2,{12:101}),o($Vw,[2,29]),o($Vw,[2,30]),o($Vw,[2,31]),o($Vw,[2,32]),{10:$V4,18:77,20:102,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{50:103,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o([10,21,26,48,49,52,53,54,55,59,60,61,62,63],[2,53]),o($V_,[2,41]),{10:$V4,18:77,20:104,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,25:105},{10:$V4,18:77,20:106,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:107,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:108,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:109,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($V_,[2,60]),o($V_,[2,61]),o($V_,[2,62]),o($V_,[2,63]),o($V_,[2,64]),o($V0,[2,9]),o($V0,[2,6]),o($V0,[2,8]),{10:$V4,18:77,20:110,22:111,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:[1,112]},{19:[1,113]},o($V$,[2,72]),o($V$,[2,73]),o($V$,[2,74]),o($V$,[2,75]),o($V$,[2,76]),o($V$,[2,77]),o($V$,[2,78]),o($V$,[2,79]),o($V$,[2,80]),o($V$,[2,81]),o($V$,[2,82]),o($V$,[2,83]),o($V$,[2,84]),o($V$,[2,85]),o($V$,[2,86]),o($V$,[2,87]),o($V$,[2,88]),o($V$,[2,89]),o($V$,[2,90]),{10:$VS,21:[1,114],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},o($V_,$Vx),{10:$V4,18:77,20:116,25:78,26:[1,115],48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:118,25:78,26:$V6,27:117,28:$VR,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:82,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{21:[1,119]},o($V01,$V11,{23:92,56:93,21:$V21,58:$V21}),o([21,28],[2,55],{58:[1,120]}),{21:[1,121]},{21:[1,122]},{10:$VS,21:[1,123],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},{10:$VS,21:[1,124],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},{10:$VS,21:[1,125],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},{10:$VS,14:[1,126],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},{10:$VS,11:[1,127],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},{10:$VS,14:[1,128],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},o($VZ,$V2,{12:129}),{10:$V4,18:77,20:130,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,18:77,20:131,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($V31,[2,66]),o($V31,[2,67]),o($V31,[2,68]),o($V31,[2,69]),o($V31,[2,70]),o($V31,[2,71]),{10:$V4,15:[1,132],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,40:[1,133],41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($V_,[2,39],{23:92,56:93}),o($V_,[2,40]),{10:$VS,23:92,28:$V41,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},{10:$V4,18:77,20:135,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($V_,[2,47],{23:92,56:93}),o($V_,[2,48],{23:92,56:93}),o($V_,[2,49],{23:92,56:93}),o($V_,[2,50],{23:92,56:93}),{10:$VS,21:[1,136],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},{21:[1,137]},{21:[2,65]},{10:$V4,18:77,20:138,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($Vw,[2,15]),{10:$V4,18:77,20:118,25:78,26:$V6,27:139,28:$VR,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,57:82,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($V_,$V11,{23:92,56:93}),{28:[1,140]},o([10,58],$V21,{23:92,56:93,28:$V41,54:$Vy,55:$Vz,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($Vw,[2,17]),{10:$V4,18:77,20:141,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($Vw,[2,18]),o($Vw,[2,19]),o($Vw,[2,20]),o($Vw,[2,21]),o($Vw,[2,22]),o($V51,$V2,{12:142}),o($V1,$V2,{12:143}),o($V3,$V2,{12:144}),{10:$V4,17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,40:[1,145],41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($V61,[2,51],{23:92,56:93,54:$Vy,55:$Vz,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($V61,[2,52],{23:92,56:93,54:$Vy,55:$Vz,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($Vw,[2,27]),o($Vw,[2,28]),o($V_,[2,43]),o($V61,[2,46],{23:92,56:93,54:$Vy,55:$Vz,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($Vw,[2,12]),o($Vw,[2,13]),{10:$VS,21:[1,146],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},{28:[1,147]},o($V01,$V71,{21:[1,148]}),o([21,28,58],[2,57],{23:92,56:93,10:$VS,54:$Vy,55:$Vz,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),{10:$V4,15:$V81,17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:149,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$V91,47:$Va1,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,13:[1,153],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$V4,15:[1,154],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($Vw,[2,26]),o($Vw,[2,14]),o($V_,$V71),o($Vw,[2,16]),o($Vw,[2,23]),o($Vw,[2,33]),o($V3,$V2,{12:155}),{10:$V4,18:77,20:156,25:78,26:$V6,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($Vb1,$Vc1,{50:40,51:42,18:77,25:78,37:157,20:159,10:$V4,11:$Vd1,26:$V6,48:$Vl,49:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv}),o($Vw,[2,25]),{10:$V4,15:[1,160],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},{10:$VS,14:[1,161],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},o($Vw,[2,24]),o($V1,$V2,{12:162}),{10:$VS,11:[1,163],23:92,54:$Vy,55:$Vz,56:93,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ},o($Vw,[2,34]),o($V51,$V2,{12:164}),{10:$V4,13:[1,165],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($V1,$V2,{12:166}),{10:$V4,15:$V81,17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:167,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$V91,47:$Va1,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($Vw,[2,37]),{10:$V4,13:[1,168],17:18,18:19,20:30,24:$V5,25:21,26:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,38:$Ve,39:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,48:$Vl,49:$Vm,50:40,51:42,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv},o($Vw,[2,35]),o($Vb1,$Vc1,{50:40,51:42,18:77,25:78,20:159,37:169,10:$V4,11:$Vd1,26:$V6,48:$Vl,49:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv}),o($Vw,[2,38])],
defaultActions: {6:[2,1],112:[2,65]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip white space */
break;
case 1:/* ignore comments  */
break;
case 2:/* ignore comments  */
break;
case 3:/* ignore comments  */
break;
case 4:return 7;
break;
case 5:return 8;
break;
case 6:return 59;
break;
case 7:return 60;
break;
case 8:return 61;
break;
case 9:return 62;
break;
case 10:return 63;
break;
case 11:return 64;
break;
case 12:return 64;
break;
case 13:return 26;
break;
case 14:return 28;
break;
case 15:return 58;
break;
case 16:return 16;
break;
case 17:return 24;
break;
case 18:return 14;
break;
case 19:return 15;
break;
case 20:return 34;
break;
case 21:return 47;
break;
case 22:return 46;
break;
case 23:return 36;
break;
case 24:return 11;
break;
case 25:return 13;
break;
case 26:return 38;
break;
case 27:return 41;
break;
case 28:return 42;
break;
case 29:return 43;
break;
case 30:return 39;
break;
case 31:return 40;
break;
case 32:return 44;
break;
case 33:return 45;
break;
case 34:return 19;
break;
case 35:return 21;
break;
case 36:return 31;
break;
case 37:return 32;
break;
case 38:return 33;
break;
case 39:return 48;
break;
case 40:return 49;
break;
case 41:return 54;
break;
case 42:return 55;
break;
case 43:return 71;
break;
case 44:return 72;
break;
case 45:return 73;
break;
case 46:return 52;
break;
case 47:return 74;
break;
case 48:return 75;
break;
case 49:return 76;
break;
case 50:return 77;
break;
case 51:return 78;
break;
case 52:return 79;
break;
case 53:return 53;
break;
case 54:return 80;
break;
case 55:return 81;
break;
case 56:return 82;
break;
case 57:return 83;
break;
case 58:return 84;
break;
case 59:return 85;
break;
case 60:return 86;
break;
case 61:return 87;
break;
case 62:return 65;
break;
case 63:return 66;
break;
case 64:return 67;
break;
case 65:return 68;
break;
case 66:return 69;
break;
case 67:return 70;
break;
case 68:return 29;
break;
case 69:return 30;
break;
case 70:return 10;
break;
case 71:return 6;
break;
case 72:return 'INVALID';
break;
case 73:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:(#|❦).*)/,/^(?:#\(.*\)#)/,/^(?:☙.*❧)/,/^(?:USE\s*8\s*BITS|use\s*8\s*bits|\[8\])/,/^(?:USE\s*16\s*BITS|\[16\])/,/^(?:[0-9]+\b)/,/^(?:0b[0-1]+\b)/,/^(?:0o[0-7]+\b)/,/^(?:0x[0-9a-fA-F]+\b)/,/^(?:'.')/,/^(?:".*")/,/^(?:❝.*❞)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:MAIN|main)/,/^(?:RETURN|return|\*>)/,/^(?:DO|do)/,/^(?:END|end)/,/^(?:IF|if)/,/^(?:ELSE\s*IF|else\s*if)/,/^(?:ELSE|else)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:WHILE|while)/,/^(?:LOOP|loop)/,/^(?:RETRY|retry)/,/^(?:STOP|stop)/,/^(?:\[)/,/^(?:\])/,/^(?:<\|)/,/^(?:\|>)/,/^(?::=|=)/,/^(?:\.|;)/,/^(?:WAIT|wait|\(%\)|⧗)/,/^(?:BELL|bell|\(\*\)|♫)/,/^(?:PRINT|print|\(&\)|¶)/,/^(?:AT|at|@)/,/^(?:REG|reg|\$)/,/^(?:\+)/,/^(?:-)/,/^(?:\*|×)/,/^(?:\/|÷)/,/^(?:%|MOD|mod)/,/^(?:NOT|not|!|¬)/,/^(?:AND|and|&&|∧)/,/^(?:OR|or|\|\||∨)/,/^(?:XOR|xor|\^\^|⊕)/,/^(?:NAND|nand|!&|⊼)/,/^(?:NOR|nor|!\||⊽)/,/^(?:XNOR|xnor|!\^|≡)/,/^(?:~)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:~&)/,/^(?:~\|)/,/^(?:~\^)/,/^(?:<<)/,/^(?:>>)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+\+|⭜)/,/^(?:--|⭝)/,/^(?:[A-Za-z_\u00A0-\uFFFF]+)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = tapeParser;
exports.Parser = tapeParser.Parser;
exports.parse = function () { return tapeParser.parse.apply(tapeParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}