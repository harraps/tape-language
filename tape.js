/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var tape = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,13,15,17,20,21,22,23,24,25,26,27,30,34,37,39,41,43,45,46,51,53,55,56,57,81,82,83,84,85],$V1=[2,8],$V2=[1,36],$V3=[1,35],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[1,25],$Vj=[1,27],$Vk=[1,28],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[1,37],$Vr=[1,38],$Vs=[1,39],$Vt=[1,40],$Vu=[1,41],$Vv=[6,13,15,17,20,21,22,23,24,25,26,27,30,32,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,55,56,57,81,82,83,84,85],$Vw=[1,49],$Vx=[1,50],$Vy=[13,15,17,20,21,22,23,24,25,26,27,30,34,37,39,41,43,44,45,46,51,53,55,56,57,81,82,83,84,85],$Vz=[1,70],$VA=[1,69],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[1,78],$VJ=[1,79],$VK=[1,80],$VL=[1,81],$VM=[1,82],$VN=[1,83],$VO=[1,84],$VP=[1,85],$VQ=[1,86],$VR=[1,87],$VS=[1,88],$VT=[1,89],$VU=[1,90],$VV=[1,91],$VW=[1,92],$VX=[1,93],$VY=[10,13,15,19,28,31,35,43,52,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],$VZ=[13,15,43,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,78,79,80],$V_=[2,41],$V$=[10,13,15,19,28,31,35,43,52,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,78,79,80],$V01=[2,46],$V11=[13,15,17,20,21,22,23,24,25,26,27,30,34,37,38,39,41,43,45,46,47,48,51,53,55,56,57,81,82,83,84,85],$V21=[13,15,17,20,21,22,23,24,25,26,27,30,32,34,37,39,41,43,45,46,51,53,55,56,57,81,82,83,84,85],$V31=[13,15,17,20,21,22,23,24,25,26,27,30,34,37,39,40,41,43,45,46,49,50,51,53,55,56,57,81,82,83,84,85],$V41=[13,15,17,20,21,22,23,24,25,26,27,30,34,37,38,39,41,43,45,46,51,53,55,56,57,81,82,83,84,85],$V51=[13,15,17,20,21,22,23,24,25,26,27,30,34,37,39,40,41,43,45,46,51,53,55,56,57,81,82,83,84,85],$V61=[10,13,15,19,28,31,35,43,52,54,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,78,79,80],$V71=[10,19,28,31,35,43,52,54,61,62,63,64,65,66,75,76,77,78,79,80],$V81=[10,19,28,31,35,43,52,54,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,78,79,80],$V91=[10,19,28,31,35,43,52,54],$Va1=[10,19,28,31,35,43,52,54,75,76],$Vb1=[1,167],$Vc1=[1,168],$Vd1=[1,169],$Ve1=[1,172],$Vf1=[1,173],$Vg1=[1,174],$Vh1=[6,21,22,23,24,25,26,27,30,32,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50],$Vi1=[2,34],$Vj1=[1,180];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"def":4,"instrs":5,"EOF":6,"DEFINE":7,"SIGNED":8,"BYTE":9,".":10,"UNSIGNED":11,"WORD":12,"-":13,"number":14,"+":15,"instr":16,"AT":17,"expr":18,"ASSIGN":19,"INCR":20,"FLAG":21,"GOTO":22,"WAIT":23,"BELL":24,"DISPLAY":25,"PRINT":26,"IF1":27,"BEGIN1":28,"elses1":29,"IF2":30,"BEGIN2":31,"END2":32,"elses2":33,"IF4":34,"BEGIN4":35,"elses4":36,"LOOP1":37,"END1":38,"LOOP4":39,"END4":40,"LOOP3":41,"END3":42,"LOOPBEGIN":43,"LOOPEND":44,"STOP":45,"RETRY":46,"ELSE1":47,"ELSEIF1":48,"ELSE4":49,"ELSEIF4":50,"LPAR1":51,"RPAR1":52,"LPAR2":53,"RPAR2":54,"NOT":55,"BNOT":56,"DECR":57,"*":58,"/":59,"%":60,"AND":61,"OR":62,"XOR":63,"NAND":64,"NOR":65,"XNOR":66,"BAND":67,"BOR":68,"BXOR":69,"BNAND":70,"BNOR":71,"BXNOR":72,"LSHIFT":73,"RSHIFT":74,"==":75,"!=":76,">":77,"<":78,">=":79,"<=":80,"DECIMAL":81,"BINARY":82,"OCTAL":83,"HEXADECIMAL":84,"CHARACTER":85,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"DEFINE",8:"SIGNED",9:"BYTE",10:".",11:"UNSIGNED",12:"WORD",13:"-",15:"+",17:"AT",19:"ASSIGN",20:"INCR",21:"FLAG",22:"GOTO",23:"WAIT",24:"BELL",25:"DISPLAY",26:"PRINT",27:"IF1",28:"BEGIN1",30:"IF2",31:"BEGIN2",32:"END2",34:"IF4",35:"BEGIN4",37:"LOOP1",38:"END1",39:"LOOP4",40:"END4",41:"LOOP3",42:"END3",43:"LOOPBEGIN",44:"LOOPEND",45:"STOP",46:"RETRY",47:"ELSE1",48:"ELSEIF1",49:"ELSE4",50:"ELSEIF4",51:"LPAR1",52:"RPAR1",53:"LPAR2",54:"RPAR2",55:"NOT",56:"BNOT",57:"DECR",58:"*",59:"/",60:"%",61:"AND",62:"OR",63:"XOR",64:"NAND",65:"NOR",66:"XNOR",67:"BAND",68:"BOR",69:"BXOR",70:"BNAND",71:"BNOR",72:"BXNOR",73:"LSHIFT",74:"RSHIFT",75:"==",76:"!=",77:">",78:"<",79:">=",80:"<=",81:"DECIMAL",82:"BINARY",83:"OCTAL",84:"HEXADECIMAL",85:"CHARACTER"},
productions_: [0,[3,3],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[5,0],[5,2],[16,5],[16,4],[16,4],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,5],[16,6],[16,5],[16,5],[16,5],[16,3],[16,3],[16,3],[16,3],[16,4],[16,1],[16,1],[29,1],[29,3],[29,5],[33,0],[33,3],[33,5],[36,1],[36,3],[36,5],[18,1],[18,2],[18,3],[18,3],[18,2],[18,2],[18,3],[18,3],[18,2],[18,2],[18,2],[18,2],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[14,1],[14,1],[14,1],[14,1],[14,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return TAPE.formaters._program($$[$0-2], $$[$0-1]); 
break;
case 2:
 this.$ = TAPE.formaters._define( -8); 
break;
case 3:
 this.$ = TAPE.formaters._define(  8); 
break;
case 4:
 this.$ = TAPE.formaters._define(-16); 
break;
case 5:
 this.$ = TAPE.formaters._define( 16); 
break;
case 6:
 this.$ = TAPE.formaters._define(-$$[$0-1]); 
break;
case 7:
 this.$ = TAPE.formaters._define( $$[$0-1]); 
break;
case 9:
 this.$ = TAPE.formaters._instructions($$[$0-1], $$[$0]); 
break;
case 10:
 this.$ = new TAPE.types.Assign($$[$0-3], $$[$0-1]); 
break;
case 11:
 this.$ = TAPE.formaters._incr(1, $$[$0-1]); 
break;
case 12:
 this.$ = TAPE.formaters._decr(1, $$[$0-1]); 
break;
case 13:
 this.$ = new TAPE.types.Flag($$[$0-1]); 
break;
case 14:
 this.$ = new TAPE.types.Goto($$[$0-1]); 
break;
case 15:
 this.$ = new TAPE.actions.WAIT($$[$0-1], function(){}); 
break;
case 16:
 this.$ = new TAPE.actions.BELL($$[$0-1], sound);        
break;
case 17: case 18:
 this.$ = new TAPE.actions.Print($$[$0-1]);              
break;
case 19:
 this.$ = TAPE.formaters._if($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 20:
 this.$ = TAPE.formaters._if($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 21:
 this.$ = TAPE.formaters._if($$[$0-3], $$[$0-1], $$[$01]); 
break;
case 22: case 23: case 28:
 this.$ = new TAPE.types.Loop($$[$0-3]  , $$[$0-1]); 
break;
case 24: case 25: case 26: case 27:
 this.$ = new TAPE.types.Loop(null, $$[$0-1]); 
break;
case 29:
 this.$ = new TAPE.types.Break(true ); 
break;
case 30:
 this.$ = new TAPE.types.Break(false); 
break;
case 32: case 35: case 38:
 this.$ = TAPE.formaters._else($$[$0-1]); 
break;
case 33: case 39:
 this.$ = TAPE.formaters._elseif($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 36:
 this.$ = TAPE.formaters._elseif($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 40:
 this.$ = $$[$0]; 
break;
case 41:
 this.$ = new TAPE.types.Monadic(TAPE.op.AT, $$[$0]); 
break;
case 42: case 43:
 this.$ = $$[$0-1]; 
break;
case 44:
 this.$ = new TAPE.types.Monadic(TAPE.op.NOT , $$[$0]); 
break;
case 45:
 this.$ = new TAPE.types.Monadic(TAPE.op.BNOT, $$[$0]); 
break;
case 46:
 this.$ = TAPE.formaters._incr(1, $$[$0]);  
break;
case 47:
 this.$ = TAPE.formaters._decr(1, $$[$0]);  
break;
case 48:
 this.$ = TAPE.formaters._incr(0, $$[$0]);  
break;
case 49:
 this.$ = TAPE.formaters._decr(0, $$[$0]);  
break;
case 50:
 this.$ = new TAPE.types.Monadic(TAPE.op.ABS, $$[$0]); 
break;
case 51:
 this.$ = new TAPE.types.Monadic(TAPE.op.NEG, $$[$0]); 
break;
case 52:
 this.$ = new TAPE.types.Dyadic(TAPE.op.ADD   , $$[$0-2], $$[$0]); 
break;
case 53:
 this.$ = new TAPE.types.Dyadic(TAPE.op.SUB   , $$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = new TAPE.types.Dyadic(TAPE.op.MUL   , $$[$0-2], $$[$0]); 
break;
case 55:
 this.$ = new TAPE.types.Dyadic(TAPE.op.DIV   , $$[$0-2], $$[$0]); 
break;
case 56:
 this.$ = new TAPE.types.Dyadic(TAPE.op.MOD   , $$[$0-2], $$[$0]); 
break;
case 57:
 this.$ = new TAPE.types.Dyadic(TAPE.op.AND   , $$[$0-2], $$[$0]); 
break;
case 58:
 this.$ = new TAPE.types.Dyadic(TAPE.op.OR    , $$[$0-2], $$[$0]); 
break;
case 59:
 this.$ = new TAPE.types.Dyadic(TAPE.op.XOR   , $$[$0-2], $$[$0]); 
break;
case 60:
 this.$ = new TAPE.types.Dyadic(TAPE.op.NAND  , $$[$0-2], $$[$0]); 
break;
case 61:
 this.$ = new TAPE.types.Dyadic(TAPE.op.NOR   , $$[$0-2], $$[$0]); 
break;
case 62:
 this.$ = new TAPE.types.Dyadic(TAPE.op.XNOR  , $$[$0-2], $$[$0]); 
break;
case 63:
 this.$ = new TAPE.types.Dyadic(TAPE.op.BAND  , $$[$0-2], $$[$0]); 
break;
case 64:
 this.$ = new TAPE.types.Dyadic(TAPE.op.BOR   , $$[$0-2], $$[$0]); 
break;
case 65:
 this.$ = new TAPE.types.Dyadic(TAPE.op.BXOR  , $$[$0-2], $$[$0]); 
break;
case 66:
 this.$ = new TAPE.types.Dyadic(TAPE.op.BNAND , $$[$0-2], $$[$0]); 
break;
case 67:
 this.$ = new TAPE.types.Dyadic(TAPE.op.BNOR  , $$[$0-2], $$[$0]); 
break;
case 68:
 this.$ = new TAPE.types.Dyadic(TAPE.op.BXNOR , $$[$0-2], $$[$0]); 
break;
case 69:
 this.$ = new TAPE.types.Dyadic(TAPE.op.LSHIFT, $$[$0-2], $$[$0]); 
break;
case 70:
 this.$ = new TAPE.types.Dyadic(TAPE.op.RSHIFT, $$[$0-2], $$[$0]); 
break;
case 71:
 this.$ = new TAPE.types.Dyadic(TAPE.op.EQU   , $$[$0-2], $$[$0]); 
break;
case 72:
 this.$ = new TAPE.types.Dyadic(TAPE.op.DIF   , $$[$0-2], $$[$0]); 
break;
case 73:
 this.$ = new TAPE.types.Dyadic(TAPE.op.GRT   , $$[$0-2], $$[$0]); 
break;
case 74:
 this.$ = new TAPE.types.Dyadic(TAPE.op.LST   , $$[$0-2], $$[$0]); 
break;
case 75:
 this.$ = new TAPE.types.Dyadic(TAPE.op.GTE   , $$[$0-2], $$[$0]); 
break;
case 76:
 this.$ = new TAPE.types.Dyadic(TAPE.op.LTE   , $$[$0-2], $$[$0]); 
break;
case 77:
 this.$ = TAPE.formaters._number('decimal'    , yytext); 
break;
case 78:
 this.$ = TAPE.formaters._number('binary'     , yytext); 
break;
case 79:
 this.$ = TAPE.formaters._number('octal'      , yytext); 
break;
case 80:
 this.$ = TAPE.formaters._number('hexadecimal', yytext); 
break;
case 81:
 this.$ = TAPE.formaters._number('character'  , yytext); 
break;
}
},
table: [{3:1,4:2,7:[1,3]},{1:[3]},o($V0,$V1,{5:4}),{8:[1,5],11:[1,6],13:[1,7],15:[1,8]},{6:[1,9],13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,39:$Vg,41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{9:[1,42],12:[1,43]},{9:[1,44],12:[1,45]},{14:46,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{14:47,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{1:[2,1]},o($Vv,[2,9]),{13:$V2,14:29,15:$V3,17:$Vw,18:48,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:[1,51],18:52,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{14:53,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:54,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:55,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:56,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:57,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:58,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:59,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:60,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:61,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o([21,22,23,24,25,26,27,30,34,37,38,39,41,43,45,46],$V1,{14:29,18:62,5:63,13:$V2,15:$V3,17:$Vw,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu}),o([21,22,23,24,25,26,27,30,34,37,39,40,41,43,45,46],$V1,{14:29,18:64,5:65,13:$V2,15:$V3,17:$Vw,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu}),o([13,15,17,20,21,22,23,24,25,26,27,30,34,37,39,41,42,43,45,46,51,53,55,56,57,81,82,83,84,85],$V1,{5:66}),o($Vy,$V1,{5:67}),{13:$Vz,15:$VA,43:[1,68],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},o($Vv,[2,29]),o($Vv,[2,30]),o($VY,[2,40]),{13:$V2,14:29,15:$V3,17:$Vw,18:94,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:95,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:96,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:97,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:[1,98],18:99,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:100,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:101,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($VY,[2,77]),o($VY,[2,78]),o($VY,[2,79]),o($VY,[2,80]),o($VY,[2,81]),{10:[1,102]},{10:[1,103]},{10:[1,104]},{10:[1,105]},{10:[1,106]},{10:[1,107]},o($VZ,$V_,{19:[1,108],73:$VQ,74:$VR}),{13:$V2,14:29,15:$V3,17:$Vw,18:109,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:[1,110],18:52,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:111,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($V$,[2,48],{73:$VQ,74:$VR}),{10:[1,112]},{10:[1,113],13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{10:[1,114],13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{10:[1,115],13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{10:[1,116],13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{10:[1,117],13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{13:$Vz,15:$VA,28:[1,118],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{13:$Vz,15:$VA,31:[1,119],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{13:$Vz,15:$VA,35:[1,120],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{13:$Vz,15:$VA,28:[1,121],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,38:[1,122],39:$Vg,41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$Vz,15:$VA,35:[1,123],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,39:$Vg,40:[1,124],41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,39:$Vg,41:$Vh,42:[1,125],43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,39:$Vg,41:$Vh,43:$Vi,44:[1,126],45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($Vy,$V1,{5:127}),{13:$V2,14:29,15:$V3,17:$Vw,18:128,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:129,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:130,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:131,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:132,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:133,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:134,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:135,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:136,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:137,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:138,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:139,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:140,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:141,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:142,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:143,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:144,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:145,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:146,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:147,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:148,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:149,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:150,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:151,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,17:$Vw,18:152,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$Vz,15:$VA,52:[1,153],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{13:$Vz,15:$VA,54:[1,154],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},o($V$,[2,44],{73:$VQ,74:$VR}),o($V$,[2,45],{73:$VQ,74:$VR}),{13:$V2,14:29,15:$V3,17:$Vw,18:155,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($V$,[2,49],{73:$VQ,74:$VR}),o($V$,[2,50],{73:$VQ,74:$VR}),o($V$,[2,51],{73:$VQ,74:$VR}),o($V0,[2,2]),o($V0,[2,4]),o($V0,[2,3]),o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,7]),{13:$V2,14:29,15:$V3,17:$Vw,18:156,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($V$,$V_,{73:$VQ,74:$VR}),{13:$V2,14:29,15:$V3,17:$Vw,18:157,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($VZ,$V01,{10:[1,158],73:$VQ,74:$VR}),o($Vv,[2,13]),o($Vv,[2,14]),o($Vv,[2,15]),o($Vv,[2,16]),o($Vv,[2,17]),o($Vv,[2,18]),o($V11,$V1,{5:159}),o($V21,$V1,{5:160}),o($V31,$V1,{5:161}),o($V41,$V1,{5:162}),o($Vv,[2,24]),o($V51,$V1,{5:163}),o($Vv,[2,26]),o($Vv,[2,25]),o($Vv,[2,27]),{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,39:$Vg,41:$Vh,43:$Vi,44:[1,164],45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($V61,[2,52],{58:$VB,59:$VC,60:$VD,73:$VQ,74:$VR}),o($V61,[2,53],{58:$VB,59:$VC,60:$VD,73:$VQ,74:$VR}),o($V$,[2,54],{73:$VQ,74:$VR}),o($V$,[2,55],{73:$VQ,74:$VR}),o($V$,[2,56],{73:$VQ,74:$VR}),o($V71,[2,57],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($V71,[2,58],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($V71,[2,59],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($V71,[2,60],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($V71,[2,61],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($V71,[2,62],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($V81,[2,63],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,73:$VQ,74:$VR}),o($V81,[2,64],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,73:$VQ,74:$VR}),o($V81,[2,65],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,73:$VQ,74:$VR}),o($V81,[2,66],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,73:$VQ,74:$VR}),o($V81,[2,67],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,73:$VQ,74:$VR}),o($V81,[2,68],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,73:$VQ,74:$VR}),o($V91,[2,69],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX}),o($V91,[2,70],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX}),o($V91,[2,71],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,77:$VU,78:$VV,79:$VW,80:$VX}),o($V91,[2,72],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,77:$VU,78:$VV,79:$VW,80:$VX}),o($Va1,[2,73],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($Va1,[2,74],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($Va1,[2,75],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($Va1,[2,76],{13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),o($VY,[2,42]),o($VY,[2,43]),o($V$,[2,47],{73:$VQ,74:$VR}),{10:[1,165],13:$Vz,15:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},o($V$,$V01,{73:$VQ,74:$VR}),o($Vv,[2,11]),{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,29:166,30:$Vd,34:$Ve,37:$Vf,38:$Vb1,39:$Vg,41:$Vh,43:$Vi,45:$Vj,46:$Vk,47:$Vc1,48:$Vd1,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,32:[1,170],34:$Ve,37:$Vf,39:$Vg,41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,36:171,37:$Vf,39:$Vg,40:$Ve1,41:$Vh,43:$Vi,45:$Vj,46:$Vk,49:$Vf1,50:$Vg1,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,38:[1,175],39:$Vg,41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,39:$Vg,40:[1,176],41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($Vv,[2,28]),o($Vv,[2,10]),o($Vv,[2,19]),o($Vv,[2,31]),o($V41,$V1,{5:177}),{13:$V2,14:29,15:$V3,17:$Vw,18:178,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($Vh1,$Vi1,{14:29,33:179,18:181,13:$V2,15:$V3,17:$Vw,20:$Vx,31:$Vj1,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu}),o($Vv,[2,21]),o($Vv,[2,37]),o($V51,$V1,{5:182}),{13:$V2,14:29,15:$V3,17:$Vw,18:183,20:$Vx,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($Vv,[2,22]),o($Vv,[2,23]),{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,38:[1,184],39:$Vg,41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$Vz,15:$VA,28:[1,185],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},o($Vv,[2,20]),o($V21,$V1,{5:186}),{13:$Vz,15:$VA,31:[1,187],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,37:$Vf,39:$Vg,40:[1,188],41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$Vz,15:$VA,35:[1,189],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX},o($Vv,[2,32]),o($V11,$V1,{5:190}),{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,32:[1,191],34:$Ve,37:$Vf,39:$Vg,41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($V21,$V1,{5:192}),o($Vv,[2,38]),o($V31,$V1,{5:193}),{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,29:194,30:$Vd,34:$Ve,37:$Vf,38:$Vb1,39:$Vg,41:$Vh,43:$Vi,45:$Vj,46:$Vk,47:$Vc1,48:$Vd1,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($Vv,[2,35]),{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,32:[1,195],34:$Ve,37:$Vf,39:$Vg,41:$Vh,43:$Vi,45:$Vj,46:$Vk,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},{13:$V2,14:29,15:$V3,16:10,17:$V4,18:26,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:$Vb,27:$Vc,30:$Vd,34:$Ve,36:196,37:$Vf,39:$Vg,40:$Ve1,41:$Vh,43:$Vi,45:$Vj,46:$Vk,49:$Vf1,50:$Vg1,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu},o($Vv,[2,33]),o($Vh1,$Vi1,{14:29,18:181,33:197,13:$V2,15:$V3,17:$Vw,20:$Vx,31:$Vj1,51:$Vl,53:$Vm,55:$Vn,56:$Vo,57:$Vp,81:$Vq,82:$Vr,83:$Vs,84:$Vt,85:$Vu}),o($Vv,[2,39]),o($Vv,[2,36])],
defaultActions: {9:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip white space */
break;
case 1:/* ignore comments  */
break;
case 2:return 7;
break;
case 3:return 11;
break;
case 4:return 7;
break;
case 5:return 9;
break;
case 6:return 12;
break;
case 7:return 81;
break;
case 8:return 82;
break;
case 9:return 83;
break;
case 10:return 84;
break;
case 11:return 85;
break;
case 12:return 19;
break;
case 13:return 28;
break;
case 14:return 31;
break;
case 15:return 35;
break;
case 16:return 38;
break;
case 17:return 32;
break;
case 18:return 42;
break;
case 19:return 40;
break;
case 20:return 27;
break;
case 21:return 30;
break;
case 22:return 34;
break;
case 23:return 48;
break;
case 24:return 50;
break;
case 25:return 'ELSE';
break;
case 26:return 37;
break;
case 27:return 41;
break;
case 28:return 39;
break;
case 29:return 43;
break;
case 30:return 44;
break;
case 31:return 45;
break;
case 32:return 46;
break;
case 33:return 21;
break;
case 34:return 22;
break;
case 35:return 23;
break;
case 36:return 24;
break;
case 37:return 25;
break;
case 38:return 26;
break;
case 39:return 10;
break;
case 40:return 17;
break;
case 41:return 15;
break;
case 42:return 13;
break;
case 43:return 58;
break;
case 44:return 59;
break;
case 45:return 60;
break;
case 46:return 20;
break;
case 47:return 57;
break;
case 48:return 55;
break;
case 49:return 61;
break;
case 50:return 62;
break;
case 51:return 63;
break;
case 52:return 64;
break;
case 53:return 65;
break;
case 54:return 66;
break;
case 55:return 75;
break;
case 56:return 76;
break;
case 57:return 77;
break;
case 58:return 78;
break;
case 59:return 79;
break;
case 60:return 80;
break;
case 61:return 56;
break;
case 62:return 67;
break;
case 63:return 68;
break;
case 64:return 69;
break;
case 65:return 70;
break;
case 66:return 71;
break;
case 67:return 72;
break;
case 68:return 73;
break;
case 69:return 74;
break;
case 70:return 51;
break;
case 71:return 52;
break;
case 72:return 53;
break;
case 73:return 54;
break;
case 74:return 6;
break;
case 75:return 'INVALID';
break;
case 76:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:(#|❦|💭).*)/,/^(?:DEFINE|<\$>|※|📯)/,/^(?:UNSIGNED|☏|📷)/,/^(?:SIGNED|☎|📸)/,/^(?:BYTE|☎|💿)/,/^(?:WORD|☻|📀)/,/^(?:[0-9]+\b)/,/^(?:b[0-1]+\b)/,/^(?:o[0-7]+\b)/,/^(?:x[0-9a-fA-F]+\b)/,/^(?:'.')/,/^(?:ASSIGN|:=|≔|✍️)/,/^(?:DO)/,/^(?:\{)/,/^(?:🔛)/,/^(?:END)/,/^(?:\})/,/^(?:•)/,/^(?:🔚)/,/^(?:IF)/,/^(?:\?)/,/^(?:❔)/,/^(?:ELSE\s*IF)/,/^(?:❓)/,/^(?:ELSE)/,/^(?:LOOP)/,/^(?:♺)/,/^(?:🔄)/,/^(?:\[)/,/^(?:\])/,/^(?:STOP|\\>|⭍|🛑)/,/^(?:RETRY|\\<)/,/^(?:FLAG|\|>|⚑|🚩)/,/^(?:GO\s*TO|->|➽|💨)/,/^(?:WAIT|><|⧗|⏳)/,/^(?:BELL|\(\*\)|♫|🔔)/,/^(?:DISPLAY|\$|👁|👁️)/,/^(?:PRINT|\$\$|❡|👀)/,/^(?:\.)/,/^(?:AT|@|★|📌)/,/^(?:ADD|\+)/,/^(?:SUB|-)/,/^(?:MUL|\*|×)/,/^(?:DIV|\/|÷)/,/^(?:MOD|%|mod)/,/^(?:INCR|\+\+|⭜|👍)/,/^(?:DECR|--|⭝|👎)/,/^(?:NOT|!|¬)/,/^(?:AND|&&|∧)/,/^(?:OR|\|\||∨)/,/^(?:XOR|\^\^|⊕)/,/^(?:NAND|!&|⊼)/,/^(?:NOR|!\||⊽)/,/^(?:XNOR|!\^|≡)/,/^(?:==|=)/,/^(?:!=|≠)/,/^(?:>)/,/^(?:<)/,/^(?:>=|≥)/,/^(?:<=|≤)/,/^(?:~)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:~&)/,/^(?:~\|)/,/^(?:~\^)/,/^(?:<<|⏪)/,/^(?:>>|⏩)/,/^(?:\()/,/^(?:\))/,/^(?:⟨)/,/^(?:⟩)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = tape;
exports.Parser = tape.Parser;
exports.parse = function () { return tape.parse.apply(tape, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}